{
  function removeSpace(arr) {
    for (var i = 0; i < arr.length; i++) {
      if (arr[i] === " ") {
        arr.splice(i, 1);
      }
    }
  }
}

S =
   S:(LAUGHING / SEEK_REAFFIRM / CALLING / SUBJ_NP / HO_TU? SUBJ_VP / SUBJ / YES_NO) _ EXCLAM? { return ["S", S]; }

SUBJ_NP = SUBJ? NP
SUBJ_VP = SUBJ? VP

YES_NO = YES_NO:(YES / NO) { return ["YES_NO", YES_NO]; }

YES =
  YES:("uh dung roi" / "uh duoc" / "uh ngon" / "vang dung roi" / "dung roi" / "dung the" / "dung" / "uh" / "okay" / "ok" / "yup" / "yeah" / "yes" / "vang") _ { return ["YES", YES ]; }

NO =
  NO:("khong sai roi" / "khong nham roi" / "khong phai" / "khong" / "nham roi" / "sai roi" / "sai" / "nah" / "nope" / "no") { return ["NO", NO ]; }

SUBJ = SUBJ:NP { return ["SUBJ", SUBJ]; }

// verb phrase
VP
  = VP:(PP? V PP? NP? PP?) { return ["VP", VP]; }

// noun phrase
NP
  = NP:(NUMBER? CLASSIFIER? (PRP / NOUN) ADJ* / NUMBER) _
  {
    return ["NP", NP];
  }

// động từ tình thái
VTT = VTT:("muon") _

// động từ hành động
VHD =
  VHD:("dat lenh" / "dat mua" / "dat ban" / "dat" / "mua" / "ban" / "huy" / "sua" / "chao" / "lam duoc" / "lam" / "la" / "biet" / "xem so lenh" / "xem trang thai lenh") _ { return VHD; }

V = VTT? V:VHD { return ["V", V]; }

// Prepositional phrase
PP =
  PP:(P / ("cho" / "giup" / "voi") $_ PRP / "gia" $_ PRICE:NUMBER {return ["PRICE", PRICE]; }) _ {
  removeSpace(PP);
  return ["PP", PP];
}

P =
  P:("nhanh" / "ngay") _ { return {P: P}; }

CLASSIFIER = CLASSIFIER:("con") _ { return {CLASSIFIER: CLASSIFIER}; }

NOUN =
  NOUN:(STOCK / "gia" / "ma" / "lenh" / "cp" / "co phieu" / "co") _ { return ["NOUN", NOUN]; }

STOCK =
  ("co phieu" / "co" / "ma" / "cp")? _ STOCK:(<%= stockSymbols %>) _ { return ["STOCK", STOCK]; }

ADJ =
  ADJ:("vua xong" / "dep") _ { return ["ADJ", ADJ]; }

NUMBER
    = NUMBER:number $_ ("ngan" / "nghin" / "k") _ { NUMBER *= 1000; return ["NUMBER", NUMBER]; }
    / NUMBER:number _ { return ["NUMBER", NUMBER]; }

// Pronoun
PRP =
  PRP:("minh" / "mi" / "em yeu" / "toi" / "tao" / "anh" / "em" / "chi" / "bo may" / "chu" / "bac" / "chau" / "may"/ UNK_PRP) _ { return ["PRP", PRP]; }

UNK_PRP =
  UNK_PRP:("lam gi" / "cai gi" / "nhung gi" / "gi") _ { return ["UNK_PRP", UNK_PRP]; }

EXCLAM =
  EXCLAM:("the nay" / "the" / "nhe"/ "voi" / "day" / "di" / "dau" / "cai" / "nao" / "thoi" / "ah" / "a" / "y") { return ["EXCLAM", EXCLAM]; }

SEEK_REAFFIRM =
  SEEK_REAFFIRM:("co that khong" / "co that the khong" / "that the khong" / "that khong" / "that the ah" / "that the a" / "the ah" / "the a") { return ["SEEK_REAFFIRM", SEEK_REAFFIRM] }

// hô từ
HO_TU = HO_TU:("uh the" / "u the" / "uh thi" / "u thi" / "the" / "vay") _ { return ["HO_TU", HO_TU]; }

CALLING =
  CALLING:(PRP $_ ("oi" / "ah" / "a")) _ { return ["CALLING", CALLING]; }

LAUGHING =
  LAUGHING:$("ha" "ha"+ "h"?) _ { return ["LAUGHING", LAUGHING]}

_ = [ \t\n\r]*
__ = [ \t\n\r]+


number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point = "."
digit1_9      = [1-9]
e             = [eE]
exp           = e (minus / plus)? DIGIT+
frac          = decimal_point DIGIT+
int           = zero / (digit1_9 DIGIT*)
minus         = "-"
plus          = "+"
zero          = "0"

DIGIT = [0-9]
